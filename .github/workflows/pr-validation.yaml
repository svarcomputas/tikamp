name: Validate Bicep Files
permissions:
  id-token: write

on:
  pull_request:
    branches:
      - main
    paths:
      - '**/*.bicep'
      - '**/*.bicepparam'

jobs:
  create-migration-bundle:
    name: Create EF-migrations bundle
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Setup .NET
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: 8.0.x

      - name: Restore dependencies
        run: |
          for project in $(find . -name "*.csproj"); do
            echo "Restoring $project"
            dotnet restore "$project"
          done

      - name: Build
        run: dotnet build Tikamp.Api/Tikamp.Api.csproj --no-restore

      - name: Setup EF Tools
        run: |
          dotnet tool install --global dotnet-ef --ignore-failed-sources --version 8.0.10
          dotnet tool restore 
      - name: Bundle EF Migrations
        run: |
          dotnet ef migrations bundle --target-runtime linux-x64 --self-contained --output ./efbundle --verbose --no-build --project Tikamp.Api/Tikamp.Api.csproj
      - name: Upload EF Migrations Bundle Artifact
        uses: actions/upload-artifact@v4
        with:
          name: efbundle
          path: ./efbundle
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest
    environment: preprod
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Setup .NET
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: 8.0.x

      - name: Restore dependencies
        run: |
          for project in $(find . -name "*.csproj"); do
            echo "Restoring $project"
            dotnet restore "$project"
          done

      - name: Build
        run: dotnet build Tikamp.Api/Tikamp.Api.csproj -c Release --no-restore

      - name: Test
        run: |
          for testProject in $(find . -name "*Test*.csproj"); do
            echo "Testing $testProject"
            dotnet test "$testProject" -c Release --no-build --verbosity normal --filter "Category!=LongRunning"
          done
      - name: Create Docker Image
        run: dotnet publish ./Tikamp.Api/Tikamp.Api.csproj /t:PublishContainer -r linux-x64
      - name: change image tag
        run: docker tag tikamp-api tikamp.azurecr.io/tikamp-api-${{ vars.environment }}:${{ github.sha }}
      - uses: azure/docker-login@v1
        with:
          login-server: tikamp.azurecr.io
          username: ${{ secrets.acr_tikamp_username }}
          password: ${{ secrets.acr_tikamp_password }}
  
      - name: Build and push image to ACR
        id: build-image
        run: |
         docker push tikamp.azurecr.io/tikamp-api-${{ vars.environment }}:${{ github.sha }}
      - name: Deploy web app
        uses: azure/webapps-deploy@v2
        with:
          app-name: tikamp-${{ vars.environment }}-app
          publish-profile: ${{ secrets.azureWebAppPublishProfile }}
          images: 'tikamp.azurecr.io/tikamp-api-${{ vars.environment }}:${{ github.sha }}'

  validate-bicep:
    name: Validate Bicep Files
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Azure CLI Login
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Validate Bicep Parameters Files
        run: |
          echo "Validating Bicep parameters files..."
          find ./.bicep -name "*.bicepparam" -exec az bicep build-params -f {} \;

      - name: Validate Bicep Files
        run: |
          echo "Validating Bicep files..."
          az bicep build -f .bicep/main.bicep;

      - name: Publish Bicep Artifacts
        uses: actions/upload-artifact@v4
        with:
          include-hidden-files: true
          name: ARM-template
          path: |
            .bicep/*.json
  deploy-database:
    needs: [ create-migration-bundle ]
    runs-on: ubuntu-latest
    environment: preprod
    steps:
      - name: Azure CLI Login
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      - name: Download EF Bundle Artifact
        uses: actions/download-artifact@v4
        with:
          name: efbundle
          path: artifacts/efbundle
      - name: Migrate Database
        shell: bash
        run: |
          chmod +x ./artifacts/efbundle/efbundle 
          ./artifacts/efbundle/efbundle --connection 'Server=${{ vars.dbserver }};Database=tikamp${{ vars.environment }}db;User^
            Id=;Password=;Ssl Mode=VerifyCA;' --verbose